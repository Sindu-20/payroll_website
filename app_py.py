# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12q73miCwhyk2LgdjUq_Bo5fiyzMiLu0l
"""

import streamlit as st
import sqlite3
from datetime import datetime

# Connect to SQLite
conn = sqlite3.connect("payroll.db", check_same_thread=False)
cursor = conn.cursor()

# Create Tables
cursor.execute("""
CREATE TABLE IF NOT EXISTS employees (
    emp_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    designation TEXT,
    salary_per_day REAL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS attendance (
    emp_id INTEGER,
    date TEXT,
    status TEXT CHECK(status IN ('Present', 'Absent')),
    FOREIGN KEY(emp_id) REFERENCES employees(emp_id)
)
""")
conn.commit()

# UI: Title
st.title("ðŸ’¼ Employee Payroll System")

menu = ["Add Employee", "Mark Attendance", "View Employees", "Generate Salary Slip"]
choice = st.sidebar.selectbox("Menu", menu)

# Add Employee
if choice == "Add Employee":
    st.subheader("âž• Add New Employee")
    name = st.text_input("Name")
    designation = st.text_input("Designation")
    salary = st.number_input("Salary per Day", min_value=0.0, format="%.2f")
    if st.button("Add Employee"):
        cursor.execute("INSERT INTO employees (name, designation, salary_per_day) VALUES (?, ?, ?)",
                       (name, designation, salary))
        conn.commit()
        st.success(f"Employee {name} added.")

# Mark Attendance
elif choice == "Mark Attendance":
    st.subheader("ðŸ“… Mark Attendance")
    cursor.execute("SELECT emp_id, name FROM employees")
    data = cursor.fetchall()
    emp_dict = {f"{name} (ID: {emp_id})": emp_id for emp_id, name in data}
    emp_name = st.selectbox("Select Employee", list(emp_dict.keys()))
    status = st.radio("Status", ["Present", "Absent"])
    date = st.date_input("Date", datetime.today()).strftime("%Y-%m-%d")

    if st.button("Submit Attendance"):
        emp_id = emp_dict[emp_name]
        cursor.execute("INSERT INTO attendance (emp_id, date, status) VALUES (?, ?, ?)",
                       (emp_id, date, status))
        conn.commit()
        st.success(f"Attendance for {emp_name} marked as {status}.")

# View Employees
elif choice == "View Employees":
    st.subheader("ðŸ‘¥ Employee List")
    cursor.execute("SELECT * FROM employees")
    rows = cursor.fetchall()
    st.table(rows)

# Generate Salary Slip
elif choice == "Generate Salary Slip":
    st.subheader("ðŸ§¾ Generate Salary Slip")
    emp_id = st.number_input("Enter Employee ID", min_value=1, step=1)
    month = st.selectbox("Select Month", [f"{i:02}" for i in range(1, 13)])

    if st.button("Generate"):
        cursor.execute("SELECT name, salary_per_day FROM employees WHERE emp_id = ?", (emp_id,))
        emp = cursor.fetchone()
        if emp:
            name, salary_per_day = emp
            cursor.execute("""
                SELECT COUNT(*) FROM attendance
                WHERE emp_id = ? AND strftime('%m', date) = ? AND status = 'Present'
            """, (emp_id, month))
            days_present = cursor.fetchone()[0]
            net_salary = days_present * salary_per_day

            st.markdown("### ðŸ’° Salary Slip")
            st.write(f"**Employee ID:** {emp_id}")
            st.write(f"**Name:** {name}")
            st.write(f"**Month:** {month}")
            st.write(f"**Days Present:** {days_present}")
            st.write(f"**Salary/Day:** â‚¹{salary_per_day}")
            st.write(f"**Net Salary:** â‚¹{net_salary}")
        else:
            st.error("Employee not found.")

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

